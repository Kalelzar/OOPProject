#+AUTHOR: Borislav Atanasov
#+DESCRIPTION: TO-DO list for the project

:TableOfContents:
[[./main.org][MAIN]]
[[./issuetracker.org][ISSUES]]
:END:

* TODO Project [2/3]                                                :project:
** TODO Set up git repo                                                 :git:
** DONE Pick a unit testing library                                    :unit:
   CLOSED: [2020-03-24 Tue 23:23]
** DONE Set up CPP support in Emacs                               :cpp:emacs:
   CLOSED: [2020-03-24 Tue 23:23]
* TODO Topic - Hotel(11) [[https://docs.google.com/document/d/1quesENVOm28Ue37vGhU2oB4d-dsUG0VX1mCELxx6LN4/edit#heading=h.uyrb68787w5m][Link]] [0/1] :project:
** TODO Requirements [0/3]
*** TODO Working with files [0/6]                                      :file:
**** TODO Open [0/4]
     - [ ] Opened files must have their entire contents loaded in memory and then
      they must be closed.
      That could be an issue with large files
     - [ ] All modifications to the file content must be done in-memory unless
      explicitly told otherwise
     - [ ] Output success or failure and what was done
     - [ ] If there was an error while reading the file tell so to the user and terminate
**** TODO Close [0/2]
     - [ ] Close the currently opened file by clearing all internal state
       regarding the file.
     - [ ] Only the command "open" is available after closing the file ( What about exit? )
**** TODO Save [0/1]
     - [ ] Write all changes to the same file from which the information was read ( i.e the 'opened' file )
**** TODO Save As [0/1]
     - [ ] Same as Save but takes a path to save the file to rather than to original 'opened' file
**** TODO Help [0/1]
     - [ ] Returns short help about the supported commands and arguments
**** TODO Exit [0/1]
     - [ ] Closes the program
*** TODO Hotel operations [0/7]
**** TODO Check-in [0/2]
     - [ ] Takes the number of the room, as well as the start and end date of the stay, and a note
     - [ ] Register the provided room as taken
**** TODO Availability [0/2]
     - [ ] Takes the optional <date>. If not provided assume today.
     - [ ] Displays a list of free beds on <date>
**** TODO Check-out [0/1]
     - [ ] Free the room with the provided number
**** TODO Report [0/2]
     - [ ] Takes two arguments <from: Date> <to: Date>
     - [ ] Displays the usage of beds in the given range along with the days a room has been used.
       NOTICE: A room may be used more than once in the given time period
**** TODO Find [0/2]
     - [ ] Takes three arguments <beds: Int> <from: Date> <to: Date>
     - [ ] Finds a free room with at least <beds> beds for the period from <from> to <to>
**** TODO Find! [0/2]
     - [ ] Takes three arguments <beds: Int> <from: Date> <to: Date>
     - [ ] Same as find but allows for moving the guests in at most 2 beds to other beds.
**** TODO Unavailable [0/2]
     - [ ] Takes four arguments <room: Int> <from: Date> <to: Date> <note: String>
     - [ ] Mark room <room> as unavailable in the provided period and with the note <note>
       Nobody may check-into an unavailable room.
*** TODO Bonus [0/1]
**** TODO Activities
***** TODO [#A] Finish this section
** TODO Tasks [0/1]                                                    :task:
*** TODO Create a way to store dates in the appropriate format [7/8]
**** DONE A constructor with explicit day, month and year will definetely be useful
     CLOSED: [2020-03-25 Wed 17:06]
**** DONE A default constructor? Maybe set it to current day? Or maybe a static method today()? Both?
     CLOSED: [2020-03-25 Wed 17:06]
     Decided to add both.
**** DONE A constructor from string? As that is the way the dates will be read it seems logical.
     CLOSED: [2020-03-25 Wed 17:29]
     Is it better to off-load the parsing of the date to Date or do it in-place while it is read? Why?
     Maybe have an explicit static method for that like Date Date::fromString(const char* str). In what way is that
     Better than a constructor?
     Parse inside Date and do both constructor and static method.
**** DONE Does this class need a Big Four? Why? Why not?
     CLOSED: [2020-03-25 Wed 17:08]
     Not really. I mean there is a default constructor but that's about it. No need for destructors or explicit copy constructor/operator= as the defaults work just fine;
**** DONE Is a date immutable? Is there a reason for or benefit to making the Date class immutable?
     CLOSED: [2020-03-25 Wed 18:06]
     What about mutable? Will the Date class need to change? Perhaps there is a need for Date arithmetics?
     It really doesn't need to change. As such immutable it is. Full-blown date arithmetics are unnecessary but getting the amount of days between two dates is needed.
**** DONE How do we format the date? Using a format string? By baking in the ISO Whatever Standard?
     CLOSED: [2020-03-25 Wed 17:14]
     Do we just straight up print the date to stdout? What about stderr? Is there a reason to return a string?
     How do we write the date to a file? Maybe override the << and >> operators? If we do return a string
     how do we do that? Create the string inside the function and return that?
     That would require trusting the user to remember to free it, and I have trust issues when it comes to memory managment.
     Maybe take the string in as reference and make the usage of memory more explicit in a similiar manner to C's scanf/printf?
     What are the benefits to each approach?

     Printing the date to stdout is maybe unnecessary? But I will implement it for now.
     Stderr? Not really needed for now so I will skip it.
     Overriding << and >> is a good idea so I will get to it in a bit.
     Use a reference for the return function. It makes me feel safer.
     Also bake in ISO 8601. No need to overcomplicate things.
**** DONE What do we do with malformed dates? Just assume that the user meant what they typed and try to compensate?
     CLOSED: [2020-03-25 Wed 17:14]
     Throw a tantrum? Maybe add support for both approaches?
     For now I will compensate. I will probably add support for strict evaluation later on.
**** TODO Any other functionality that a date needs?
*** TODO Reading commands
**** TODO Maybe implement each command as a separate class that inherits from a common HotelCommand class
     Seems far too bulky and unintuitive. Hard pass.
**** TODO Just do a standard parser? I guess so.

*** TODO How do we store the data in a file? Should it be human-readable? Maybe a binary data format? [0/0]
#+SRC_BEGIN
  hotel 1.0
  room 10 booked from 2020-03-19 to 2020-03-23 - FAMILY
  room 9  unavailable from 2020-03-01 to 2020-04-15 - Repairs
#+SRC_END
    Maybe something like that? It's simple enough. Parsing it should be relatively simple too.
**** TODO Why not just store the info as a sequence of commands? The same commands that the user inputs that is.
     And then when a file is opened just pass the commands line-by-line to the same interpreter that the user does.
**** TODO How do we know what beds exist? Is there info anywhere? There doesn't seem to be.
